<%- include('includes/head.ejs') %>
    <br>
    <input type="hidden" id="epic_Link" value="<%= tickets[0].epic_Link %>">
    <div>

      <!--Dentro de este div no se debe mover nada, está hecho para que automáticamente se acomode el despliegue dependiendo de
          como esté acomodada la ventana. Es un ajuste automático. Todo lo relacionado a los datos debe moverse en el js-->
        <a style="margin-left: 15px;" href='/homepage' class="btn btn-secondary float-right">Return
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-return-left" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M14.5 1.5a.5.5 0 0 1 .5.5v4.8a2.5 2.5 0 0 1-2.5 2.5H2.707l3.347 3.346a.5.5 0 0 1-.708.708l-4.2-4.2a.5.5 0 0 1 0-.708l4-4a.5.5 0 1 1 .708.708L2.707 8.3H12.5A1.5 1.5 0 0 0 14 6.8V2a.5.5 0 0 1 .5-.5z"/>
            </svg>
        </a>
        <div class="d-flex justify-content-between align-items-center px-4">
            <p class="mr-auto mb-0"><h1>Dashboard</h1></p>
        </div>      
        <div class="d-flex justify-content-between align-items-center px-4">
            <p class="mr-auto mb-0"><h2><%= tickets[0].epic_Link_Summary %></h2></p>
            <p class="mr-auto mb-0"><h2></h2></p>
            <p class="ml-auto mb-0">
                <h4>
                    <figure>
                      <figcaption>Team members</figcaption>
                    <img src="https://www.necesitomas.com/files/cuadrantealista03.png" alt="Descripción de la imagen">
                    
                    </figure>
                </h4>
            </p>
        </div>
        <div class="d-flex justify-content-between align-items-center px-5" id="no-data">

            <canvas id="Burnup" width="auto" height="auto" style="margin: 15%"></canvas>

            <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
            
        </div>
    </div>
    </div> 
    <script>
    window.addEventListener('load', () => {
        // Función que manda petición asíncrona cuando se carga o recarga la pag
        let id = document.getElementById("epic_Link").value;
        
        fetch('/epics/dashboard/' + id, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            }
        }).then(result => {
            return result.json(); 
        }).then(datas => {
            let miCanvas = document.getElementById("Burnup").getContext("2d");
            // Calcula los sprints (por semana) que habrán como eje x de la gráfica
            let _sprints = [];  
            for (let i = 0; i < Math.ceil(datas.tickets[0].sprints); i++) {
                _sprints.push(i);
            }
            let ticket_Updates = [];
            for(let i = 0; i < datas.tickets.length; i++){
                ticket_Updates.push(datas.tickets[i].ticket_Update);
            }
            ticket_Updates.push(datas.tickets[0].created_at);
            // console.log(ticket_Updates);
            // Función para encontrar el índice de la fecha mínima entre
            // las updates por ticket y la created_at del epic correspondiente
            function findMinTimestampIndex(dataArray) {
                let minIndex = 0;
                let minTimestamp = new Date(dataArray[0]).getTime();
                for (let i = 1; i < dataArray.length; i++) {
                    let currentTimestamp = new Date(dataArray[i]).getTime();
                    if (currentTimestamp < minTimestamp) {
                        minIndex = i;
                        minTimestamp = currentTimestamp;
                    }
                }
                return minIndex;
            }
            let sprint_0 = ticket_Updates[findMinTimestampIndex(ticket_Updates)];
            const scope = {
                0: [],
                1: [],
                2: [],
                3: [],
                4: [],
                5: [],
                6: [],
                7: [],
                8: [],
                9: []
            };
        
            console.log(scope);
            let j = 0;
            // console.log(sprint_0);
            ticket_Updates.pop();
            for(let ticket_Update of ticket_Updates){
                let current_Up = new Date(ticket_Update).getTime();
                let calculo = Math.round((current_Up - new Date(sprint_0).getTime()) / (1000 * 60 * 60 * 24 * 7));
                console.log("[Dev] Semanas: " + calculo);
                scope[calculo].push(j);
                j++;
                }
            console.log(_sprints);
            if(_sprints.length > 1){
                const data = {
                    type:'line',
                    data:{
                        labels: _sprints,
                        datasets:[
                            {
                                label: "Scope",
                                data:[67,67,67,67,67,72,75, 75],
                                backgroundColor:['rgb(0,0,0,.10)'],
                                borderColor:['rgb(0,0,0)'],
                                borderWidth: 3
                            },
                            {   
                                label: "Goal",
                                data:[0,11,21,32,43,54,64,75],
                                backgroundColor:['rgb(40, 40, 222,.20)'],
                                borderColor:['rgb(40, 40, 222)'],
                                borderWidth: 2
                            },
                            {
                                label:"Done",
                                data:[0,4,12,15,33,38,58,75],
                                backgroundColor:['rgb(25, 250, 0,.30)'],
                                borderColor:['rgb(25, 250, 0)'],
                                borderWidth: 2,
                                borderCapStyle: 'round',
                            }
                        
                            
                        ]
                    },
                    options:{
                        plugins:{
                            legend: {position:'bottom',}
                        },
                        scales:{
                            y:{
                                beginAtZero:true,
                                title: {
                                    display: true,
                                    text: 'Story Points',
                                    color: 'black',
                                    font: {
                                        size: 20,
                                        weight: 'bold'
                                    }
                                }
                            },
                            x:{
                                grid: {
                                    display: false
                                },
                                title: {
                                    display: true,
                                    text: 'Sprint',
                                    color: 'black',
                                    font: {
                                        size: 20,
                                        weight: 'bold'
                                    }
                                }
                            },
                        }
                    }
                }
                var chart = new Chart(miCanvas, data)
            } else {
                document.getElementById("no-data").innerHTML = '<h1> No hay suficientes datos para graficar </h1>';
            }
        }).catch(err =>{console.log(err);});
        
})
    
    </script>
    <!-- <%- include('includes/chart.ejs')%> -->
    <%- include('includes/foot.ejs') %>