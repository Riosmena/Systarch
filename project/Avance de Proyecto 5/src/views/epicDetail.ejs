<%- include('includes/head.ejs') %>

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <style>
            h1{
                margin-top: 1em;
                margin-left: 1em;
                font-size: 58px;
            }
            #flex{
                display: flex;
            }
            #team{
                position: absolute;
                right: 0;
                margin-right: 75px;
                margin-top: 45px;
            }
            #separator{
                margin-top: 5em;
                margin-bottom: 5em;
            }
            #backButton{
                position: absolute;
                right: 0;
                margin-right: 45px;
            }
            h3{
                font-size: 36px;
                margin-top: 25px;
                text-align: center;
            }
            .col-sm-8{
                width: 990px;
                height: 620px;
                background-color: #e9ecef;
                margin-left: 3%;
                border-radius: 5%;
            }
            .col-sm-4{
                width: 763px;
                height: 620px;
                background-color: #e9ecef;
                margin-left: 3%;
                margin-right: 3%;
                border-radius: 5%;
            }
            #Burnup{
                margin-left: 5%;
                margin-right: 10%;
            }
            #barChart{
                margin-left: 6em;
                margin-right: 6em;
            }
            #doughnutChart{
                margin-left: 6em;
                margin-right: 6em;
            }
            .teamTableContainer{
                position: absolute;
                right: 0;
                padding-right: 9%;
            }
            .table-head{
                text-align: center;
            }
            .table-col {
                overflow: hidden; 
                text-overflow: ellipsis; 
                white-space: nowrap;
                text-align: center;
            }
            #teamUserName{
                width: 275px; 
            }
            #teamUserWeeklyAp, #teamUserSkill{
                width: 150px;
            }
            .teamTableTitle, .burnupChartTitle{
                padding-bottom: 20px;
            }
            .col-sm{
                width: 930px;
                height: 870px;
                background-color: #e9ecef;
                border-radius: 5%;
            }
            #ticketStatusOverview{
                margin-left: 3%;
                margin-right: 3%;
            }
            #ticketLabelChart{
                margin-left: 3%;
            }
            .ticketStatusOverviewTitle, .ticketLabelChartTitle{
                margin-bottom: 5em;
            }
            
        </style>
    </head>
    <!-- NO QUITAR ESTE INPUT, ES PARA TOMAR EL VALOR DEL EPIC ID -->
    <input type="hidden" id="epic_Link" value="<%= tickets[0].epic_Link %>"> 

<section id="head">
    <div id="flex">
        <div id="title">
            <h1 class="fw-light" id="title"><%= tickets[0].epic_Link_Summary %></h1>
        </div>
    </div>
</section>

<section id="body">

    <div>
        
        <div id="separator">
            <div class="row">
                <div class="col-sm-8">
                    <div class="burnupChartContainer">
                        <div class="burnupChartTitle">
                            <h3 class="fw-normal" id="burnupChartTitleText">Burnup Chart</h3>
                        </div>
                        <div id="no-data" class="burnupChart">
                            <canvas id="Burnup"></canvas>
                            <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
                        </div>
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="teamTableContainer">
                        <div class="teamTableTitle">
                            <h3 class="fw-normal">Team members</h3>
                        </div>
                        <div class="teamTable">
                            <table class="table table-striped">
                                <tthead>
                                    <tr>
                                        <th class="table-head">User</th>
                                        <th class="table-head">Agile Points</th>
                                        <th class="table-head">Skill</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% team.forEach(team => { %>
                                    <tr>
                                        <td class="table-col" id="teamUserName"><%= team.user_Name %></td>
                                        <td class="table-col" id="teamUserWeeklyAP"><%= team.user_WeeklyAgilePoints %></td>
                                        <td class="table-col" id="teamUserSkill"><%= team.user_Skill %></td>
                                    </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        
        <div id="separator">
            <div class="row">
                <div class="col-sm" id="ticketLabelChart">
                    <div class="ticketLabelChart">
                        <div class="ticketLabelChartTitle">
                            <h3 class="fw-normal">Tickets Label</h3>
                        </div>
                        <canvas id="barChart" style="height:40vh; width:21.4vw"></canvas>
                        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
                    </div>
                </div>
                <div class="col-sm" id="ticketStatusOverview">
                    <div class="ticketStatusOverview">
                        <div class="ticketStatusOverviewTitle">
                            <h3 class="fw-normal">Ticket Status Overview</h3>
                        </div>
                        <canvas id="doughnutChart" style="height:40vh; width:21.4vw"></canvas>
                    </div>
                </div>
              </div>
        </div>
        
      </div>
</section>

<section id="footer">
    <div id="return">
        <br>
        <a href="/homepage" class="btn btn-outline-secondary float-right" id="backButton">Return&nbsp&nbsp&nbsp
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-return-left" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M14.5 1.5a.5.5 0 0 1 .5.5v4.8a2.5 2.5 0 0 1-2.5 2.5H2.707l3.347 3.346a.5.5 0 0 1-.708.708l-4.2-4.2a.5.5 0 0 1 0-.708l4-4a.5.5 0 1 1 .708.708L2.707 8.3H12.5A1.5 1.5 0 0 0 14 6.8V2a.5.5 0 0 1 .5-.5z"/>
            </svg>  
        </a>
    </div>
    <br><br><br><br>
</section>


    <script>
    window.addEventListener('load', () => {
        // Función que manda petición asíncrona cuando se carga o recarga la pag
        let id = document.getElementById("epic_Link").value;
        
        fetch('/epics/dashboard/' + id, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            }
        }).then(result => {
            return result.json(); 
        }).then(datas => {
        
        // SPRINTS 
            // Calcula los sprints (por semana) 
            let _sprints = [];
            for (let i = 0; i <= Math.ceil(datas.tickets[0].sprints)+1; i++) {
                _sprints.push(i);
            }   console.log(_sprints);
            // Validar si la gráfica tendrá sentido (Mínimo 2 sprints)
            if(_sprints.length > 1){
        
        // SCOPE
                // Hacer un arreglo con todas las fechas de Created por ticket
                let ticket_Updates = [];
                for(let i = 0; i < datas.tickets.length; i++){
                    ticket_Updates.push(datas.tickets[i].ticket_Created);
                }; // Añadir al arreglo la fecha de creación del epic de los tickets
                   // para usarlo como la mínima fecha (hasta que sea actualizada manualmente por usuario)
                ticket_Updates.push(datas.tickets[0].created_at);
                // Función para encontrar el índice de la fecha mínima entre
                // las creates por ticket y la created_at del epic correspondiente
                function findMinTimestampIndex(dataArray) {
                    let minIndex = 0;
                    let minTimestamp = new Date(dataArray[0]).getTime();
                    for (let i = 1; i < dataArray.length; i++) {
                        let currentTimestamp = new Date(dataArray[i]).getTime();
                        if (currentTimestamp < minTimestamp) {
                            minIndex = i;
                            minTimestamp = currentTimestamp;
                        }
                    }
                    return minIndex;
                }
                // Asignar a sprint_0 la fecha más baja
                let sprint_0 = ticket_Updates[findMinTimestampIndex(ticket_Updates)];
                
                // Crear el objeto scope con un atributo por sprint para 'mapear' los datos
                const scope = {}; 
                for(let i = 0; i<_sprints.length; i++){
                    scope[i] = [];
                }
                // Eliminar created_at para calcular los tickets
                // que habrá por sprint y que no se considere la fecha de creación
                ticket_Updates.pop();
                let j = 0;
                    error_scope = false;
                // Calcular los tickets que hay por sprint y asociarlos, por índice a su sprint correspondiente
                
                    for(let ticket_Update of ticket_Updates){
                    let current_Up = new Date(ticket_Update).getTime();
                    // Calcula el tiempo que ha pasado entre cada fecha y la fecha de inicio (↓↓↓ en termino de semanas)
                    let calculo = Math.floor((current_Up - new Date(sprint_0).getTime()) / (1000 * 60 * 60 * 24 * 7))+1;
                    if(calculo >= _sprints.length){ console.log(calculo);
                        console.warn("Not possible to calculate dinamic scope, replacing with constant scope");
                        error_scope = true
                        break;
                    } else {
                        scope[calculo].push(j);
                        j++;
                    };
                    };
                scopes = [];
                if(!error_scope){ 
                    scope[0] = scope[1];
                    
                    // Función para calcular Story Points (SP) por sprint
                    for(let _scopes in scope){
                        let suma = 0;
                        for(let i = 0; i < scope[_scopes].length;i++){                             
                            suma += datas.tickets[scope[_scopes][i]].Story_Points;
                        }
                        scopes.push(suma);
                        if(scopes[_scopes-1] !== undefined && _scopes > 1){
                            scopes[_scopes] += scopes[_scopes-1];
                        }
                    } 
                } 
                else {
                    for(let i = 0; i < _sprints.length;i++){
                        scopes[i] = datas.tickets[i].totalSP;
                    } console.log("Error de scope: " + scopes);
                }
                
        // GOAL
                
                let goal = [];
                for(let i = 0; i <= _sprints.length; i++){
                    goal[i] = ((datas.tickets[0].totalSP / (_sprints.length-1))*i);
                };
        
        // DONE
                const done = [0];
                let error_done = false;
                for(let finished of datas.done){
                    let current_Up = new Date(finished.ticket_Update).getTime();
                    // Calcula el tiempo que ha pasado entre cada fecha y la fecha de inicio (↓↓↓ en termino de semanas)
                    let calculo = Math.floor((current_Up - new Date(sprint_0).getTime()) / (1000 * 60 * 60 * 24 * 7))+1;
                    if(calculo >= _sprints.length){
                        done[_sprints.length-1] = done[_sprints.length-1] || 0;
                        done[_sprints.length-1] += finished.Story_Points;
                        error_done = true;
                    }else {
                        done[calculo] = done[calculo] || 0;
                        done[calculo] += finished.Story_Points;
                    }
                };
                
                let done_ = [0];
                for(let i = 1; i<done.length; i++){
                    done_[i] = done_[i-1];
                    if(done[i] !== undefined)
                        done_[i] += done[i];
                }; console.log("done_ " + done_);
                
                let miCanvas = document.getElementById("Burnup").getContext("2d");                
                const data = {
                    type:'line',
                    data:{
                        labels: _sprints,
                        datasets:[
                            {
                                label: "Scope",
                                data: scopes,
                                backgroundColor:['rgb(37,37,37,.10)'],
                                borderColor:['rgb(37,37,37)'],
                                borderWidth: 3
                            },
                            {   
                                label: "Goal",
                                data: goal,
                                backgroundColor:['rgb(91, 143, 255,.20)'],
                                borderColor:['rgb(91, 143, 255)'],
                                borderWidth: 2
                            },
                            {
                                label:"Done",
                                data: done_,
                                backgroundColor:['rgb(25,135,84, .30)'],
                                borderColor: ['rgb(25,135,84)'],
                                borderWidth: 2,
                                borderCapStyle: 'round',
                            }
                        
                            
                        ]
                    },
                    options:{
                        plugins:{
                            legend: {position:'bottom',}
                        },
                        scales:{
                            y:{
                                beginAtZero:true,
                                title: {
                                    display: true,
                                    text: 'Story Points',
                                    color: '#252525',
                                    font: {
                                        size: 20,
                                    }
                                }
                            },
                            x:{
                                grid: {
                                    display: false
                                },
                                title: {
                                    display: true,
                                    text: 'Sprint',
                                    color: '#252525',
                                    font: {
                                        size: 20,
                                    }
                                }
                            },
                        }
                    }
                }
                var chart = new Chart(miCanvas, data)
            } else {
                console.log("no-data inner");
                document.getElementById("no-data").innerHTML = '<h1> No hay suficientes datos para graficar </h1>';
            }
        }).catch(err =>{console.log(err);});
        
})
    </script>

    <script>
        
        const ctx = document.getElementById('barChart');
    
        new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ['Front End', 'Back End'],
            datasets: [{
            label: 'Ticket Label',
            data: [12, 19, 3],
            borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                beginAtZero: true
                }
            }
        }

        });

    </script>

    <script>
        const ctx2 = document.getElementById('doughnutChart');

        new Chart(ctx2, {
        type: 'doughnut',
        data: {
            labels: ['To Do', 'Canceled', 'Done', 'Code Review', 'In Progress', ],
            datasets: [{
            data: [12, 19, 5, 3, 15],
            borderWidth: 1
            }]
            },
        options: {
            layout: {
                padding: {
                bottom: 100,
                }
            }
        }
        });

    </script>

    <!-- <%- include('includes/chart.ejs')%> -->
    <%- include('includes/foot.ejs') %>